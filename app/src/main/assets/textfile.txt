Originally known as oak, Java is a programming language developed by James Gosling and others at Sun 
Microsystems. It was first introduced to the public in 1995 and is widely used to create Internet
applications and other software programs. Today, Java is maintained and owned by Oracle.

When used on the Internet, Java allows applets to be downloaded and used through a browser, which 
enables the browser to perform a function or feature not normally available. Unlike JavaScript, the users
must download or install the applet or program before being able to utilize the Java program.

Below is an example of a Java applet from Sun and a method of testing if Java is installed on your
computer. If Java is installed on your computer, you should see additional information about the installed 
Java version and your operating system.

Java is also used as the programming language for many different software programs, games, and add-ons.
Some examples of the more widely used programs written in Java or that use Java include the Adobe
Creative suite, Eclipse, Lotus Notes, Minecraft, OpenOffice, Runescape, and Vuze.

Java virtual machine (JVM)

Java is a high level programming language. A program written in high level language cannot be run on 
any machine directly. First, it needs to be translated into that particular machine language. The javac
 compiler does this thing, it takes java program (.java file containing source code) and translates it into 
machine code (referred as byte code or .class file).

A Java virtual machine (JVM) is an abstract computing machine that enables a computer to run a Java 
program. There are three notions of the JVM: specification, implementation, and instance. The specification 
is a document that formally describes what is required of a JVM implementation. Having a single 
specification ensures all implementations are interoperable. A JVM implementation is a computer program 
that meets the requirements of the JVM specification. An instance of a JVM is an implementation running 
in a process that executes a computer program compiled into Java bytecode.

Java Runtime Environment (JRE)

Java Runtime Environment (JRE) is a software package that contains what is required to run a Java
program. It includes a Java Virtual Machine implementation together with an implementation of the Java
Class Library. The Oracle Corporation, which owns the Java trademark, distributes a Java Runtime 
environment with their Java Virtual Machine called HotSpot.

Java Development Kit (JDK)

Java Development Kit (JDK) is a superset of a JRE and contains tools for Java programmers, e.g. a javac 
compiler. The Java Development Kit is provided free of charge either by Oracle Corporation directly, or by
the OpenJDK open source project, which is governed by Oracle.

JVM Vs JRE Vs JDK

JRE: JRE is the environment within which the java virtual machine runs. JRE contains Java virtual 
Machine(JVM), class libraries, and other files excluding development tools such as compiler and debugger.

Which means you can run the code in JRE but you can t develop and compile the code in JRE.

JVM: As we discussed above, JVM runs the program by using class, libraries and files provided by JRE.

JDK: JDK is a superset of JRE, it contains everything that JRE has along with development tools such as 
compiler, debugger etc.

Java Class

A class is a group of objects which have common properties. It is a template or blueprint from which 
objects are created. It is a logical entity. It can’t be physical.

A class in Java can contain:

o fields

o methods

o constructors

o blocks

o nested class and interface

Syntax to declare a class:

1. class {

2. field;

3. method;

4. }

Java Methods

A Java method is a collection of statements that are grouped together to perform an operation. When you 
call the System.out.println() method, for example, the system actually executes several statements in order 
to display a message on the console.

Now you will learn how to create your own methods with or without return values, invoke a method with 
or without parameters, and apply method abstraction in the program design.

Creating Method

Considering the following example to explain the syntax of a method

Syntax

public static int methodName(int a, int b) {

// body

}

Here,

public static modifier

int return type

methodName name of the method

a, b formal parameters

int a, int b list of parameters

Method definition consists of a method header and a method body. The same is shown in the following syntax

Syntax

modifier returnType nameOfMethod (Parameter List) {

// method body

}

The syntax shown above includes

modifier It defines the access type of the method and it is optional to use.

returnType Method may return a value.

nameOfMethod This is the method name. The method signature consists of the method name and the
 parameter list.

Parameter List The list of parameters, it is the type, order, and number of parameters of a method. These
 are optional, method may contain zero parameters.

method body The method body defines what the method does with the statements.

Example

Here is the source code of the above defined method called min(). This method takes two parameters
 num1 and num2 and returns the maximum between the two

/** the snippet returns the minimum between two numbers */

public static int minFunction(int n1, int n2) {

int min;

if (n1 > n2)

min = n2;

else

min = n1;

return min;

}

Object-Oriented

In this page, we will learn about basics of OOPs. Object Oriented Programming is a paradigm that provides 
many concepts such as inheritance, data binding, polymorphism etc.

Simula is considered as the first object-oriented programming language. The programming paradigm 
where everything is represented as an object, is known as truly object-oriented programming language.

Smalltalk is considered as the first truly object-oriented programming language.

Object means a real word entity such as pen, chair, table etc. Object-Oriented Programming 
is a methodology or paradigm to design a program using classes and objects. It simplifies the software 
development and maintenance by providing some concepts:

o Object

o Class

o Inheritance

o Polymorphism

o Abstraction

o Encapsulation

Object

Any entity that has state and behavior is known as an object. For example: chair, pen, table, keyboard, bike 
etc. It can be physical and logical.

Class

Collection of objects is called class. It is a logical entity.

Inheritance

When one object acquires all the properties and behaviours of parent object i.e. known as inheritance. It
provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism

When one task is performed by different ways i.e. known as polymorphism. For example: to convince the 
customer differently, to draw something e.g. shape or rectangle etc.

In java, we use method overloading and method overriding to achieve polymorphism.

Another example can be to speak something e.g. cat speaks meaw, dog barks woof etc.

Abstraction

Hiding internal details and showing functionality is known as abstraction. For example: phone call, we 
don’t know the internal processing.

In java, we use abstract class and interface to achieve abstraction.

Encapsulation

Binding (or wrapping) code and data together into a single unit is known as encapsulation. For example: 
capsule, it is wrapped with different medicines.

A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data 
members are private here.

Reasons for choice of java language

Java has been th
e best programming languages created in last 20 years and has been gaining popularity every passing day. 
Although there were occasions when Java development slowed down, but with path breaking changes in 
form of Enum, Autoboxing and Generics in Java 5, Google s choice of language for Android apps 
development and performance improvement with Java 6, kept Java as top programming language. Also In
 terms of Job opportunities and popularity, Java outscore every one with lots of Jobs opportunity available. 
You can work on developing core Java based server side application, can even go for Android based 
mobile application development , J2EE web and enterprise applications.

Here are top 10 reason for Learning Java Programming Language

1) Java is easy to learn

Java has fluent English like syntax which makes it easy to read Java program and learn quickly. Once you 
are familiar with initial hurdles with installing JDK and setting up PATH and understand How Classpath works,
 it s easy to write program in Java.

2) Java is an object oriented programming Language

Java is an Object Oriented Programming language. Developing OOPS application is easier, and it also 
helps to keep system modular, flexible and extensible. You can use all key concepts like Abstraction,
 Encapsulation, Polymorphism and Inheritance. Java also promotes use of SOLID and Object oriented 
design principles in form of open source projects like spring, which make sure your object dependency is
 well managed by using dependency Injection principle.

3) Java has Rich API

Java provides API for networking, I/O, utilities, XML parsing, database connection, and almost everything. 
Whatever left is covered by open source libraries like Apache Commons, Google Guava and others.

4) Powerful development tools e.g. Eclipse, Netbeans

Eclipse and Netbeans has played huge role to make Java one of the best programming language. Coding 
in IDE is a treat, especially if you have coded in DOS Editor or Notepad. They not only help in code 
completion but also provide powerful debugging capability, which is essential for development and testing.
 Integrated Development Environment made Java development much easier, faster and fluent. 
Apart from IDE, Java platform also has several other tools like Maven and ANT for building Java 
applications, JConsole, decompilers, Visual VM for monitoring Heap usage etc.

5) Good collection of Open Source libraries

Open source libraries ensures that Java should be used everywhere. Apache, Google, and other 
organization has contributed lot of great libraries, which makes Java development easy, faster and cost 
effective. There are framework like Spring, Struts, Maven, which ensures that Java development follows 
best practices of software craftsmanship, promotes use of design patterns and assisted Java developers 
to get there job done.

6) Great community support

Community is the biggest strength of Java programming language and platform. Java has lots of active 
forums, Stackoverflow, open source organizations and several Java user group to help everything. 
There is community to help beginners, advanced and even expert Java programmers. Java actually promotes taking
and giving back to community habit. Expert programmer provides advice for FREE at various Java forums
and stackoverflow.

7) Java is FREE

Since Java is free i.e. you don t need to pay anything to create Java application. This FREE thing also helped 
Java to become popular among individual programmers, and among large organizations.

8) Excellent documentation support with Javadocs

Javadocs is a great piece of documentation, which tells lot of things about Java API. Not everyone has time 
and intention to look at code to learn. Javadocs makes learning easy, and provide an excellent reference 
while coding in Java.

9) Platform Independent

Java s tag line write once run anywhere was the main reason of Java s popularity.This is still one of the
 reason of Java being best programming language, most of Java applications are developed in Windows 
environment and run in UNIX platform.

10) Java is everywhere

Yes, Java is everywhere, it s on desktop, mobile, almost everywhere and so are Java programmers. 
Organization prefers to choose Java for new development than any other programming language.

Having said that, programming is very big field and if you look at C and UNIX, which is still surviving and 
even stronger enough to live another 20 years, Java also falls in same league.

Java Organizational policy

Some organisations have policies on what software and hardware can be used, this may affect the decision 
on what language to use. For example Craven College uses the Windows Operating System because they 
teach programming using VB.NET, which requires Windows as it was developed by Microsoft. Another 
example would be that companies that develop applications for Apple devices would use Objective-C or 
Swift which are languages developed by Apple for use with their devices.

They also may have policies related on what language to use. Like Google has a policy to use Python 
which they use for most of their applications. This is chosen as the language Google uses because they 
focus a lot on making applications for the web.

Suitability of features and tools

The suitability of the features and tools of a programming language are important when choosing 
a programming language. With a wide variety of programming languages available, there are also many 
different features which are specific to certain languages. The company needs to analyse these features 
to ascertain whether the features can be used to meet the requirements of the system. They also need to 
consider whether the language only works with specific software/hardware.

Availability of Trained Staff

When choosing a language, an organisation should consider what past experiences the employees have 
with programming and if there is a common language that they all know how to use. They should also 
consider the skill level of each member of the team and whether they can develop their skill level 
enough for the language to be used. If the organisation is working on a project where they have to 
develop a new system and the organisation needs to recruit specialist, the organisation should choose 
a language that is more commonly used as it is more likely that there will be more experienced 
programmers in that language.

Reliability

Certain programming languages have features that allow the programmer to improve the reliability of
 their program. This can be because the programming language has combined features of the different 
programming paradigms or elements specific to the programming language such as a debugger and 
editor which identifies errors and stops the program from crashing.

Development and Maintenance

When continuously using a programming language, the company has to think about the development and 
maintenance costs of the software. They need to consider how much the software license is and for 
how long they will be using the software for. Some languages are easy to develop and maintain but 
are also inexpensive.

Expandability

Expandability is key when choosing a programming language. The company needs to choose a language that
 is easily expandable and allows the programmers to create a program that can sustain multiple users 
without crashing. Some programming languages are more expandable than others and have features that 
can support the larger systems that may be programmed.

Uses of Specific Programming Languages

Below are some common websites that use specific programming languages and also some popular companies 
that use specific programming languages.

Object Methods

A method in object-oriented programming (OOP) is a procedure associated with a message and an object.
An object is mostly made up of data and behavior, which form the interface that an object presents to 
the outside world. Data is represented as properties of the o
bject and behavior as methods. For example, a Window object would have methods such as open and close, 
while its state (whether it is opened or closed) would be a property.

In class-based programming, methods are defined in a class, and objects are instances of a given class. 
One of the most important capabilities that a method provides is method overriding. The same name (e.g., area) 
can be used for multiple different kinds of classes. This allows the sending objects to invoke behaviors 
and to delegate the implementation of those behaviors to the receiving object. A method in Java programming 
sets the behavior of a class object. For example, an object can send an area message to another object and
 the appropriate formula is invoked whether the receiving object is a rectangle, circle, triangle, etc.

Object

Let us now look deep into what are objects. If we consider the real-world, we can find many objects around 
us, cars, dogs, humans, etc. All these objects have a state and a behavior.

If we consider a dog, then its state is – name, breed, color, and the behavior is – barking, wagging the tail, running.

If you compare the software object with a real-world object, they have very similar characteristics.

Software objects also have a state and a behavior. A software object’s state is stored in fields and 
behavior is shown via methods.

So in software development, methods operate on the internal state of an object and the object-to-object 
communication is done via methods.

Inheritance

Inheritance in java is a mechanism in which one object acquires all the properties and behaviors of parent object. 
The idea behind inheritance in java is that you can create new classes that are built upon existing classes. 
When you inherit from an existing class, you can reuse methods and fields of parent class, 
and you can add new methods and fields also.

Inheritance represents the IS-A relationship, also known as parent-child relationship.

Why use inheritance in java

For Method Overriding (so runtime polymorphism can be achieved).

For Code Reusability.

Syntax of Java Inheritance

1. class Subclass-name extends Superclass-name

2. {

3. //methods and fields

4. }

The extends keyword indicates that you are making a new class that derives from an existing class. 
The meaning of “extends” is to increase the functionality.

In the terminology of Java, a class which is inherited is called parent or super class 
and the new class is called child or subclass.

Java Inheritance Example

As displayed in the above figure, Programmer is the subclass and Employee is the superclass. 
Relationship between two classes is Programmer IS-A Employee.It means that Programmer is a type of Employee.

1. class Employee{

2. float salary=40000;

3. }

4. class Programmer extends Employee{

5. int bonus=10000;

6. public static void main(String args[]){

7. Programmer p=new Programmer();

8. System.out.println(“Programmer salary is:”+p.salary);

9. System.out.println(“Bonus of Programmer is:”+p.bonus);

10. }

11. }

